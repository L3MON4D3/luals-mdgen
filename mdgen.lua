local argparse = require("argparse")
local parser = argparse("luals-mdgen", "Generate documentation from annotations and a markdown-template.")
parser:argument("input", "Input file.")
parser:argument("output", "Output file.")
parser:option("-w --width", "Textwidth. May be exceeded by codeblocks and long links.", "120")
parser:option("-d --doc", "json file generated by emmylua-doc-cli", "./doc.json")
local args = parser:parse()

-- some global arguments.
Templatefile = args.input
Outfile = args.output
JSONFile = args.doc

local textwidth = tonumber(args.width)
if not textwidth then
	error("Please provide a number as --width! Got `" .. args.width .. "`.")
end

local TextRenderer = require("mdgen.renderer")

local template_lines = vim.fn.readfile(Templatefile)
local res_lines = {}

local i = 1
while i <= #template_lines do
	local line_i = template_lines[i]

	local matched_indent, backticks = line_i:match("(%s*)(%`+)lua render_region")
	if matched_indent then
		local funcstr = ""

		for j = i+1, #template_lines do
			local line_j = template_lines[j]

			if line_j:match("%s*" .. backticks) then
				-- we have found a render_region, parse the lua-lines in it and
				-- execute them.
				local f, err = loadstring(funcstr)
				if not f then
					error("Error in region from line " .. i .. " to line " .. j .. ": " .. err)
				end

				local renderer = TextRenderer.new({
					textwidth = textwidth,
					base_indent = matched_indent
				})

				local f_mt = setmetatable(renderer:get_render_env(), {__index = _G})

				setfenv(f, f_mt)
				f()
				vim.list_extend(res_lines, renderer:get_final_lines())

				i = j + 1

				goto continue_outer
			else
				-- don't append the final, matching line.
				-- add \n for better readability.
				funcstr = funcstr .. line_j .. "\n"
			end
		end
		error("Could not find the end of region starting at line " .. i)
	else
		table.insert(res_lines, line_i)
		i = i+1
	end
	::continue_outer::
end

vim.fn.writefile(res_lines, Outfile)
